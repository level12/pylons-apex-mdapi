//Generated test class for MetadataCustomObject

@IsTest
public class MetadataCustomObjectTest {

    @IsTest
    private static void testMainClass() {
        Test.startTest();

        // Test main class instantiation
        MetadataCustomObject mainInstance = new MetadataCustomObject();
        System.assertNotEquals(null, mainInstance, 'Main class should be instantiated');

        Test.stopTest();
    }

    @IsTest
    private static void coverGeneratedCodeTypes() {
        Test.startTest();

        // Test inner class instantiations
        MetadataCustomObject.ActionOverride actionoverrideInstance = new MetadataCustomObject.ActionOverride();
        System.assertNotEquals(null, actionoverrideInstance, 'ActionOverride should be instantiated');
        MetadataCustomObject.ArticleTypeChannelDisplay articletypechanneldisplayInstance = new MetadataCustomObject.ArticleTypeChannelDisplay();
        System.assertNotEquals(null, articletypechanneldisplayInstance, 'ArticleTypeChannelDisplay should be instantiated');
        MetadataCustomObject.ArticleTypeTemplate articletypetemplateInstance = new MetadataCustomObject.ArticleTypeTemplate();
        System.assertNotEquals(null, articletypetemplateInstance, 'ArticleTypeTemplate should be instantiated');
        MetadataCustomObject.BusinessProcess businessprocessInstance = new MetadataCustomObject.BusinessProcess();
        System.assertNotEquals(null, businessprocessInstance, 'BusinessProcess should be instantiated');
        MetadataCustomObject.CompactLayout compactlayoutInstance = new MetadataCustomObject.CompactLayout();
        System.assertNotEquals(null, compactlayoutInstance, 'CompactLayout should be instantiated');
        MetadataCustomObject.CustomField customfieldInstance = new MetadataCustomObject.CustomField();
        System.assertNotEquals(null, customfieldInstance, 'CustomField should be instantiated');
        MetadataCustomObject.CustomObject customobjectInstance = new MetadataCustomObject.CustomObject();
        System.assertNotEquals(null, customobjectInstance, 'CustomObject should be instantiated');
        MetadataCustomObject.CustomValue customvalueInstance = new MetadataCustomObject.CustomValue();
        System.assertNotEquals(null, customvalueInstance, 'CustomValue should be instantiated');
        MetadataCustomObject.FieldSet fieldsetInstance = new MetadataCustomObject.FieldSet();
        System.assertNotEquals(null, fieldsetInstance, 'FieldSet should be instantiated');
        MetadataCustomObject.FieldSetItem fieldsetitemInstance = new MetadataCustomObject.FieldSetItem();
        System.assertNotEquals(null, fieldsetitemInstance, 'FieldSetItem should be instantiated');
        MetadataCustomObject.FilterItem filteritemInstance = new MetadataCustomObject.FilterItem();
        System.assertNotEquals(null, filteritemInstance, 'FilterItem should be instantiated');
        MetadataCustomObject.HistoryRetentionPolicy historyretentionpolicyInstance = new MetadataCustomObject.HistoryRetentionPolicy();
        System.assertNotEquals(null, historyretentionpolicyInstance, 'HistoryRetentionPolicy should be instantiated');
        MetadataCustomObject.Index indexInstance = new MetadataCustomObject.Index();
        System.assertNotEquals(null, indexInstance, 'Index should be instantiated');
        MetadataCustomObject.IndexField indexfieldInstance = new MetadataCustomObject.IndexField();
        System.assertNotEquals(null, indexfieldInstance, 'IndexField should be instantiated');
        MetadataCustomObject.ListView listviewInstance = new MetadataCustomObject.ListView();
        System.assertNotEquals(null, listviewInstance, 'ListView should be instantiated');
        MetadataCustomObject.ListViewFilter listviewfilterInstance = new MetadataCustomObject.ListViewFilter();
        System.assertNotEquals(null, listviewfilterInstance, 'ListViewFilter should be instantiated');
        MetadataCustomObject.LookupFilter lookupfilterInstance = new MetadataCustomObject.LookupFilter();
        System.assertNotEquals(null, lookupfilterInstance, 'LookupFilter should be instantiated');
        MetadataCustomObject.MktDataLakeAttributes mktdatalakeattributesInstance = new MetadataCustomObject.MktDataLakeAttributes();
        System.assertNotEquals(null, mktdatalakeattributesInstance, 'MktDataLakeAttributes should be instantiated');
        MetadataCustomObject.MktDataLakeFieldAttributes mktdatalakefieldattributesInstance = new MetadataCustomObject.MktDataLakeFieldAttributes();
        System.assertNotEquals(null, mktdatalakefieldattributesInstance, 'MktDataLakeFieldAttributes should be instantiated');
        MetadataCustomObject.MktDataModelAttributes mktdatamodelattributesInstance = new MetadataCustomObject.MktDataModelAttributes();
        System.assertNotEquals(null, mktdatamodelattributesInstance, 'MktDataModelAttributes should be instantiated');

        Test.stopTest();
    }

    @IsTest
    private static void coverGeneratedCodeTypes2() {
        Test.startTest();

        // Test inner class instantiations
        MetadataCustomObject.MktDataModelFieldAttributes mktdatamodelfieldattributesInstance = new MetadataCustomObject.MktDataModelFieldAttributes();
        System.assertNotEquals(null, mktdatamodelfieldattributesInstance, 'MktDataModelFieldAttributes should be instantiated');
        MetadataCustomObject.PicklistValue picklistvalueInstance = new MetadataCustomObject.PicklistValue();
        System.assertNotEquals(null, picklistvalueInstance, 'PicklistValue should be instantiated');
        MetadataCustomObject.ProfileSearchLayouts profilesearchlayoutsInstance = new MetadataCustomObject.ProfileSearchLayouts();
        System.assertNotEquals(null, profilesearchlayoutsInstance, 'ProfileSearchLayouts should be instantiated');
        MetadataCustomObject.RecordType recordtypeInstance = new MetadataCustomObject.RecordType();
        System.assertNotEquals(null, recordtypeInstance, 'RecordType should be instantiated');
        MetadataCustomObject.RecordTypePicklistValue recordtypepicklistvalueInstance = new MetadataCustomObject.RecordTypePicklistValue();
        System.assertNotEquals(null, recordtypepicklistvalueInstance, 'RecordTypePicklistValue should be instantiated');
        MetadataCustomObject.SearchLayouts searchlayoutsInstance = new MetadataCustomObject.SearchLayouts();
        System.assertNotEquals(null, searchlayoutsInstance, 'SearchLayouts should be instantiated');
        MetadataCustomObject.SharedTo sharedtoInstance = new MetadataCustomObject.SharedTo();
        System.assertNotEquals(null, sharedtoInstance, 'SharedTo should be instantiated');
        MetadataCustomObject.SharingReason sharingreasonInstance = new MetadataCustomObject.SharingReason();
        System.assertNotEquals(null, sharingreasonInstance, 'SharingReason should be instantiated');
        MetadataCustomObject.SharingRecalculation sharingrecalculationInstance = new MetadataCustomObject.SharingRecalculation();
        System.assertNotEquals(null, sharingrecalculationInstance, 'SharingRecalculation should be instantiated');
        MetadataCustomObject.ValidationRule validationruleInstance = new MetadataCustomObject.ValidationRule();
        System.assertNotEquals(null, validationruleInstance, 'ValidationRule should be instantiated');
        MetadataCustomObject.ValueSet valuesetInstance = new MetadataCustomObject.ValueSet();
        System.assertNotEquals(null, valuesetInstance, 'ValueSet should be instantiated');
        MetadataCustomObject.ValueSetValuesDefinition valuesetvaluesdefinitionInstance = new MetadataCustomObject.ValueSetValuesDefinition();
        System.assertNotEquals(null, valuesetvaluesdefinitionInstance, 'ValueSetValuesDefinition should be instantiated');
        MetadataCustomObject.ValueSettings valuesettingsInstance = new MetadataCustomObject.ValueSettings();
        System.assertNotEquals(null, valuesettingsInstance, 'ValueSettings should be instantiated');
        MetadataCustomObject.WebLink weblinkInstance = new MetadataCustomObject.WebLink();
        System.assertNotEquals(null, weblinkInstance, 'WebLink should be instantiated');

        Test.stopTest();
    }
}
